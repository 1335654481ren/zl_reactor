# Makefile.in generated by automake 1.11.1 from Makefile.am.
# zlreactor/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#SUBDIRS= thread utility task_service log net statistic


pkgdatadir = $(datadir)/zlreactor
pkgincludedir = $(includedir)/zlreactor
pkglibdir = $(libdir)/zlreactor
pkglibexecdir = $(libexecdir)/zlreactor
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
subdir = zlreactor
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)"
LIBRARIES = $(lib_LIBRARIES)
ARFLAGS = cru
libzlreactor_a_AR = $(AR) $(ARFLAGS)
libzlreactor_a_DEPENDENCIES =
am_libzlreactor_a_OBJECTS = libzlreactor_a-Base64.$(OBJEXT) \
	libzlreactor_a-ByteArray.$(OBJEXT) \
	libzlreactor_a-Date.$(OBJEXT) \
	libzlreactor_a-DateTimeUtil.$(OBJEXT) \
	libzlreactor_a-FileUtil.$(OBJEXT) libzlreactor_a-MD5.$(OBJEXT) \
	libzlreactor_a-StringHash.$(OBJEXT) \
	libzlreactor_a-Timestamp.$(OBJEXT) \
	libzlreactor_a-ZLog.$(OBJEXT) libzlreactor_a-Thread.$(OBJEXT) \
	libzlreactor_a-ThreadGroup.$(OBJEXT) \
	libzlreactor_a-ThreadPool.$(OBJEXT) \
	libzlreactor_a-Timer.$(OBJEXT) \
	libzlreactor_a-TimerQueue.$(OBJEXT) \
	libzlreactor_a-NetUtil.$(OBJEXT) \
	libzlreactor_a-SocketUtil.$(OBJEXT) \
	libzlreactor_a-InetAddress.$(OBJEXT)
libzlreactor_a_OBJECTS = $(am_libzlreactor_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libzlreactor_a_SOURCES)
DIST_SOURCES = $(libzlreactor_a_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /root/zl_reactor/missing --run aclocal-1.11
AMTAR = ${SHELL} /root/zl_reactor/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /root/zl_reactor/missing --run autoconf
AUTOHEADER = ${SHELL} /root/zl_reactor/missing --run autoheader
AUTOMAKE = ${SHELL} /root/zl_reactor/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wall -g -O2 -fPIC
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = -lpthread 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /root/zl_reactor/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = zlreactor
PACKAGE_BUGREPORT = lizhenghn@gmail.com
PACKAGE_NAME = zlreactor
PACKAGE_STRING = zlreactor 1.0
PACKAGE_TARNAME = zlreactor
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 1.0
abs_builddir = /root/zl_reactor/zlreactor
abs_srcdir = /root/zl_reactor/zlreactor
abs_top_builddir = /root/zl_reactor
abs_top_srcdir = /root/zl_reactor
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /root/zl_reactor/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
lib_LIBRARIES = libzlreactor.a
libzlreactor_a_LIBFLAGS = 
libzlreactor_a_LIBADD = 
INCLUDES = -I../
libzlreactor_a_CPPFLAGS = -std=c++0x
#libzlreactor_a_LDFLAGS = -lpthread	
libzlreactor_a_SOURCES = \
					 base/Base64.cpp \
					 base/ByteArray.cpp \
					 base/Date.cpp \
					 base/DateTimeUtil.cpp \
					 base/FileUtil.cpp \
					 base/MD5.cpp \
					 base/StringHash.cpp \
					 base/Timestamp.cpp \
					 base/ZLog.cpp \
					 thread/Thread.cpp \
					 thread/ThreadGroup.cpp \
					 thread/ThreadPool.cpp \
					 thread/Timer.cpp \
					 thread/TimerQueue.cpp \
					 net/NetUtil.cpp \
					 net/SocketUtil.cpp \
					 net/InetAddress.cpp 

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu zlreactor/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu zlreactor/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(INSTALL_DATA) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(INSTALL_DATA) $$list2 "$(DESTDIR)$(libdir)" || exit $$?; }
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  if test -f $$p; then \
	    $(am__strip_dir) \
	    echo " ( cd '$(DESTDIR)$(libdir)' && $(RANLIB) $$f )"; \
	    ( cd "$(DESTDIR)$(libdir)" && $(RANLIB) $$f ) || exit $$?; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libdir)' && rm -f "$$files" )"; \
	cd "$(DESTDIR)$(libdir)" && rm -f $$files

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
libzlreactor.a: $(libzlreactor_a_OBJECTS) $(libzlreactor_a_DEPENDENCIES) 
	-rm -f libzlreactor.a
	$(libzlreactor_a_AR) libzlreactor.a $(libzlreactor_a_OBJECTS) $(libzlreactor_a_LIBADD)
	$(RANLIB) libzlreactor.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libzlreactor_a-Base64.Po
include ./$(DEPDIR)/libzlreactor_a-ByteArray.Po
include ./$(DEPDIR)/libzlreactor_a-Date.Po
include ./$(DEPDIR)/libzlreactor_a-DateTimeUtil.Po
include ./$(DEPDIR)/libzlreactor_a-FileUtil.Po
include ./$(DEPDIR)/libzlreactor_a-InetAddress.Po
include ./$(DEPDIR)/libzlreactor_a-MD5.Po
include ./$(DEPDIR)/libzlreactor_a-NetUtil.Po
include ./$(DEPDIR)/libzlreactor_a-SocketUtil.Po
include ./$(DEPDIR)/libzlreactor_a-StringHash.Po
include ./$(DEPDIR)/libzlreactor_a-Thread.Po
include ./$(DEPDIR)/libzlreactor_a-ThreadGroup.Po
include ./$(DEPDIR)/libzlreactor_a-ThreadPool.Po
include ./$(DEPDIR)/libzlreactor_a-Timer.Po
include ./$(DEPDIR)/libzlreactor_a-TimerQueue.Po
include ./$(DEPDIR)/libzlreactor_a-Timestamp.Po
include ./$(DEPDIR)/libzlreactor_a-ZLog.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

libzlreactor_a-Base64.o: base/Base64.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Base64.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-Base64.Tpo -c -o libzlreactor_a-Base64.o `test -f 'base/Base64.cpp' || echo '$(srcdir)/'`base/Base64.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-Base64.Tpo $(DEPDIR)/libzlreactor_a-Base64.Po
#	source='base/Base64.cpp' object='libzlreactor_a-Base64.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Base64.o `test -f 'base/Base64.cpp' || echo '$(srcdir)/'`base/Base64.cpp

libzlreactor_a-Base64.obj: base/Base64.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Base64.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-Base64.Tpo -c -o libzlreactor_a-Base64.obj `if test -f 'base/Base64.cpp'; then $(CYGPATH_W) 'base/Base64.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Base64.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-Base64.Tpo $(DEPDIR)/libzlreactor_a-Base64.Po
#	source='base/Base64.cpp' object='libzlreactor_a-Base64.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Base64.obj `if test -f 'base/Base64.cpp'; then $(CYGPATH_W) 'base/Base64.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Base64.cpp'; fi`

libzlreactor_a-ByteArray.o: base/ByteArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ByteArray.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-ByteArray.Tpo -c -o libzlreactor_a-ByteArray.o `test -f 'base/ByteArray.cpp' || echo '$(srcdir)/'`base/ByteArray.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-ByteArray.Tpo $(DEPDIR)/libzlreactor_a-ByteArray.Po
#	source='base/ByteArray.cpp' object='libzlreactor_a-ByteArray.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ByteArray.o `test -f 'base/ByteArray.cpp' || echo '$(srcdir)/'`base/ByteArray.cpp

libzlreactor_a-ByteArray.obj: base/ByteArray.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ByteArray.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-ByteArray.Tpo -c -o libzlreactor_a-ByteArray.obj `if test -f 'base/ByteArray.cpp'; then $(CYGPATH_W) 'base/ByteArray.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ByteArray.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-ByteArray.Tpo $(DEPDIR)/libzlreactor_a-ByteArray.Po
#	source='base/ByteArray.cpp' object='libzlreactor_a-ByteArray.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ByteArray.obj `if test -f 'base/ByteArray.cpp'; then $(CYGPATH_W) 'base/ByteArray.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ByteArray.cpp'; fi`

libzlreactor_a-Date.o: base/Date.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Date.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-Date.Tpo -c -o libzlreactor_a-Date.o `test -f 'base/Date.cpp' || echo '$(srcdir)/'`base/Date.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-Date.Tpo $(DEPDIR)/libzlreactor_a-Date.Po
#	source='base/Date.cpp' object='libzlreactor_a-Date.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Date.o `test -f 'base/Date.cpp' || echo '$(srcdir)/'`base/Date.cpp

libzlreactor_a-Date.obj: base/Date.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Date.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-Date.Tpo -c -o libzlreactor_a-Date.obj `if test -f 'base/Date.cpp'; then $(CYGPATH_W) 'base/Date.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Date.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-Date.Tpo $(DEPDIR)/libzlreactor_a-Date.Po
#	source='base/Date.cpp' object='libzlreactor_a-Date.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Date.obj `if test -f 'base/Date.cpp'; then $(CYGPATH_W) 'base/Date.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Date.cpp'; fi`

libzlreactor_a-DateTimeUtil.o: base/DateTimeUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-DateTimeUtil.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-DateTimeUtil.Tpo -c -o libzlreactor_a-DateTimeUtil.o `test -f 'base/DateTimeUtil.cpp' || echo '$(srcdir)/'`base/DateTimeUtil.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-DateTimeUtil.Tpo $(DEPDIR)/libzlreactor_a-DateTimeUtil.Po
#	source='base/DateTimeUtil.cpp' object='libzlreactor_a-DateTimeUtil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-DateTimeUtil.o `test -f 'base/DateTimeUtil.cpp' || echo '$(srcdir)/'`base/DateTimeUtil.cpp

libzlreactor_a-DateTimeUtil.obj: base/DateTimeUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-DateTimeUtil.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-DateTimeUtil.Tpo -c -o libzlreactor_a-DateTimeUtil.obj `if test -f 'base/DateTimeUtil.cpp'; then $(CYGPATH_W) 'base/DateTimeUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/base/DateTimeUtil.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-DateTimeUtil.Tpo $(DEPDIR)/libzlreactor_a-DateTimeUtil.Po
#	source='base/DateTimeUtil.cpp' object='libzlreactor_a-DateTimeUtil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-DateTimeUtil.obj `if test -f 'base/DateTimeUtil.cpp'; then $(CYGPATH_W) 'base/DateTimeUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/base/DateTimeUtil.cpp'; fi`

libzlreactor_a-FileUtil.o: base/FileUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-FileUtil.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-FileUtil.Tpo -c -o libzlreactor_a-FileUtil.o `test -f 'base/FileUtil.cpp' || echo '$(srcdir)/'`base/FileUtil.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-FileUtil.Tpo $(DEPDIR)/libzlreactor_a-FileUtil.Po
#	source='base/FileUtil.cpp' object='libzlreactor_a-FileUtil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-FileUtil.o `test -f 'base/FileUtil.cpp' || echo '$(srcdir)/'`base/FileUtil.cpp

libzlreactor_a-FileUtil.obj: base/FileUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-FileUtil.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-FileUtil.Tpo -c -o libzlreactor_a-FileUtil.obj `if test -f 'base/FileUtil.cpp'; then $(CYGPATH_W) 'base/FileUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/base/FileUtil.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-FileUtil.Tpo $(DEPDIR)/libzlreactor_a-FileUtil.Po
#	source='base/FileUtil.cpp' object='libzlreactor_a-FileUtil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-FileUtil.obj `if test -f 'base/FileUtil.cpp'; then $(CYGPATH_W) 'base/FileUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/base/FileUtil.cpp'; fi`

libzlreactor_a-MD5.o: base/MD5.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-MD5.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-MD5.Tpo -c -o libzlreactor_a-MD5.o `test -f 'base/MD5.cpp' || echo '$(srcdir)/'`base/MD5.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-MD5.Tpo $(DEPDIR)/libzlreactor_a-MD5.Po
#	source='base/MD5.cpp' object='libzlreactor_a-MD5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-MD5.o `test -f 'base/MD5.cpp' || echo '$(srcdir)/'`base/MD5.cpp

libzlreactor_a-MD5.obj: base/MD5.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-MD5.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-MD5.Tpo -c -o libzlreactor_a-MD5.obj `if test -f 'base/MD5.cpp'; then $(CYGPATH_W) 'base/MD5.cpp'; else $(CYGPATH_W) '$(srcdir)/base/MD5.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-MD5.Tpo $(DEPDIR)/libzlreactor_a-MD5.Po
#	source='base/MD5.cpp' object='libzlreactor_a-MD5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-MD5.obj `if test -f 'base/MD5.cpp'; then $(CYGPATH_W) 'base/MD5.cpp'; else $(CYGPATH_W) '$(srcdir)/base/MD5.cpp'; fi`

libzlreactor_a-StringHash.o: base/StringHash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-StringHash.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-StringHash.Tpo -c -o libzlreactor_a-StringHash.o `test -f 'base/StringHash.cpp' || echo '$(srcdir)/'`base/StringHash.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-StringHash.Tpo $(DEPDIR)/libzlreactor_a-StringHash.Po
#	source='base/StringHash.cpp' object='libzlreactor_a-StringHash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-StringHash.o `test -f 'base/StringHash.cpp' || echo '$(srcdir)/'`base/StringHash.cpp

libzlreactor_a-StringHash.obj: base/StringHash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-StringHash.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-StringHash.Tpo -c -o libzlreactor_a-StringHash.obj `if test -f 'base/StringHash.cpp'; then $(CYGPATH_W) 'base/StringHash.cpp'; else $(CYGPATH_W) '$(srcdir)/base/StringHash.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-StringHash.Tpo $(DEPDIR)/libzlreactor_a-StringHash.Po
#	source='base/StringHash.cpp' object='libzlreactor_a-StringHash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-StringHash.obj `if test -f 'base/StringHash.cpp'; then $(CYGPATH_W) 'base/StringHash.cpp'; else $(CYGPATH_W) '$(srcdir)/base/StringHash.cpp'; fi`

libzlreactor_a-Timestamp.o: base/Timestamp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Timestamp.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-Timestamp.Tpo -c -o libzlreactor_a-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-Timestamp.Tpo $(DEPDIR)/libzlreactor_a-Timestamp.Po
#	source='base/Timestamp.cpp' object='libzlreactor_a-Timestamp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Timestamp.o `test -f 'base/Timestamp.cpp' || echo '$(srcdir)/'`base/Timestamp.cpp

libzlreactor_a-Timestamp.obj: base/Timestamp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Timestamp.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-Timestamp.Tpo -c -o libzlreactor_a-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-Timestamp.Tpo $(DEPDIR)/libzlreactor_a-Timestamp.Po
#	source='base/Timestamp.cpp' object='libzlreactor_a-Timestamp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Timestamp.obj `if test -f 'base/Timestamp.cpp'; then $(CYGPATH_W) 'base/Timestamp.cpp'; else $(CYGPATH_W) '$(srcdir)/base/Timestamp.cpp'; fi`

libzlreactor_a-ZLog.o: base/ZLog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ZLog.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-ZLog.Tpo -c -o libzlreactor_a-ZLog.o `test -f 'base/ZLog.cpp' || echo '$(srcdir)/'`base/ZLog.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-ZLog.Tpo $(DEPDIR)/libzlreactor_a-ZLog.Po
#	source='base/ZLog.cpp' object='libzlreactor_a-ZLog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ZLog.o `test -f 'base/ZLog.cpp' || echo '$(srcdir)/'`base/ZLog.cpp

libzlreactor_a-ZLog.obj: base/ZLog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ZLog.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-ZLog.Tpo -c -o libzlreactor_a-ZLog.obj `if test -f 'base/ZLog.cpp'; then $(CYGPATH_W) 'base/ZLog.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ZLog.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-ZLog.Tpo $(DEPDIR)/libzlreactor_a-ZLog.Po
#	source='base/ZLog.cpp' object='libzlreactor_a-ZLog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ZLog.obj `if test -f 'base/ZLog.cpp'; then $(CYGPATH_W) 'base/ZLog.cpp'; else $(CYGPATH_W) '$(srcdir)/base/ZLog.cpp'; fi`

libzlreactor_a-Thread.o: thread/Thread.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Thread.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-Thread.Tpo -c -o libzlreactor_a-Thread.o `test -f 'thread/Thread.cpp' || echo '$(srcdir)/'`thread/Thread.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-Thread.Tpo $(DEPDIR)/libzlreactor_a-Thread.Po
#	source='thread/Thread.cpp' object='libzlreactor_a-Thread.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Thread.o `test -f 'thread/Thread.cpp' || echo '$(srcdir)/'`thread/Thread.cpp

libzlreactor_a-Thread.obj: thread/Thread.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Thread.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-Thread.Tpo -c -o libzlreactor_a-Thread.obj `if test -f 'thread/Thread.cpp'; then $(CYGPATH_W) 'thread/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/Thread.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-Thread.Tpo $(DEPDIR)/libzlreactor_a-Thread.Po
#	source='thread/Thread.cpp' object='libzlreactor_a-Thread.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Thread.obj `if test -f 'thread/Thread.cpp'; then $(CYGPATH_W) 'thread/Thread.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/Thread.cpp'; fi`

libzlreactor_a-ThreadGroup.o: thread/ThreadGroup.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ThreadGroup.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-ThreadGroup.Tpo -c -o libzlreactor_a-ThreadGroup.o `test -f 'thread/ThreadGroup.cpp' || echo '$(srcdir)/'`thread/ThreadGroup.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-ThreadGroup.Tpo $(DEPDIR)/libzlreactor_a-ThreadGroup.Po
#	source='thread/ThreadGroup.cpp' object='libzlreactor_a-ThreadGroup.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ThreadGroup.o `test -f 'thread/ThreadGroup.cpp' || echo '$(srcdir)/'`thread/ThreadGroup.cpp

libzlreactor_a-ThreadGroup.obj: thread/ThreadGroup.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ThreadGroup.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-ThreadGroup.Tpo -c -o libzlreactor_a-ThreadGroup.obj `if test -f 'thread/ThreadGroup.cpp'; then $(CYGPATH_W) 'thread/ThreadGroup.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/ThreadGroup.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-ThreadGroup.Tpo $(DEPDIR)/libzlreactor_a-ThreadGroup.Po
#	source='thread/ThreadGroup.cpp' object='libzlreactor_a-ThreadGroup.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ThreadGroup.obj `if test -f 'thread/ThreadGroup.cpp'; then $(CYGPATH_W) 'thread/ThreadGroup.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/ThreadGroup.cpp'; fi`

libzlreactor_a-ThreadPool.o: thread/ThreadPool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ThreadPool.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-ThreadPool.Tpo -c -o libzlreactor_a-ThreadPool.o `test -f 'thread/ThreadPool.cpp' || echo '$(srcdir)/'`thread/ThreadPool.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-ThreadPool.Tpo $(DEPDIR)/libzlreactor_a-ThreadPool.Po
#	source='thread/ThreadPool.cpp' object='libzlreactor_a-ThreadPool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ThreadPool.o `test -f 'thread/ThreadPool.cpp' || echo '$(srcdir)/'`thread/ThreadPool.cpp

libzlreactor_a-ThreadPool.obj: thread/ThreadPool.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-ThreadPool.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-ThreadPool.Tpo -c -o libzlreactor_a-ThreadPool.obj `if test -f 'thread/ThreadPool.cpp'; then $(CYGPATH_W) 'thread/ThreadPool.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/ThreadPool.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-ThreadPool.Tpo $(DEPDIR)/libzlreactor_a-ThreadPool.Po
#	source='thread/ThreadPool.cpp' object='libzlreactor_a-ThreadPool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-ThreadPool.obj `if test -f 'thread/ThreadPool.cpp'; then $(CYGPATH_W) 'thread/ThreadPool.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/ThreadPool.cpp'; fi`

libzlreactor_a-Timer.o: thread/Timer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Timer.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-Timer.Tpo -c -o libzlreactor_a-Timer.o `test -f 'thread/Timer.cpp' || echo '$(srcdir)/'`thread/Timer.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-Timer.Tpo $(DEPDIR)/libzlreactor_a-Timer.Po
#	source='thread/Timer.cpp' object='libzlreactor_a-Timer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Timer.o `test -f 'thread/Timer.cpp' || echo '$(srcdir)/'`thread/Timer.cpp

libzlreactor_a-Timer.obj: thread/Timer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-Timer.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-Timer.Tpo -c -o libzlreactor_a-Timer.obj `if test -f 'thread/Timer.cpp'; then $(CYGPATH_W) 'thread/Timer.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/Timer.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-Timer.Tpo $(DEPDIR)/libzlreactor_a-Timer.Po
#	source='thread/Timer.cpp' object='libzlreactor_a-Timer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-Timer.obj `if test -f 'thread/Timer.cpp'; then $(CYGPATH_W) 'thread/Timer.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/Timer.cpp'; fi`

libzlreactor_a-TimerQueue.o: thread/TimerQueue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-TimerQueue.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-TimerQueue.Tpo -c -o libzlreactor_a-TimerQueue.o `test -f 'thread/TimerQueue.cpp' || echo '$(srcdir)/'`thread/TimerQueue.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-TimerQueue.Tpo $(DEPDIR)/libzlreactor_a-TimerQueue.Po
#	source='thread/TimerQueue.cpp' object='libzlreactor_a-TimerQueue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-TimerQueue.o `test -f 'thread/TimerQueue.cpp' || echo '$(srcdir)/'`thread/TimerQueue.cpp

libzlreactor_a-TimerQueue.obj: thread/TimerQueue.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-TimerQueue.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-TimerQueue.Tpo -c -o libzlreactor_a-TimerQueue.obj `if test -f 'thread/TimerQueue.cpp'; then $(CYGPATH_W) 'thread/TimerQueue.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/TimerQueue.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-TimerQueue.Tpo $(DEPDIR)/libzlreactor_a-TimerQueue.Po
#	source='thread/TimerQueue.cpp' object='libzlreactor_a-TimerQueue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-TimerQueue.obj `if test -f 'thread/TimerQueue.cpp'; then $(CYGPATH_W) 'thread/TimerQueue.cpp'; else $(CYGPATH_W) '$(srcdir)/thread/TimerQueue.cpp'; fi`

libzlreactor_a-NetUtil.o: net/NetUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-NetUtil.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-NetUtil.Tpo -c -o libzlreactor_a-NetUtil.o `test -f 'net/NetUtil.cpp' || echo '$(srcdir)/'`net/NetUtil.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-NetUtil.Tpo $(DEPDIR)/libzlreactor_a-NetUtil.Po
#	source='net/NetUtil.cpp' object='libzlreactor_a-NetUtil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-NetUtil.o `test -f 'net/NetUtil.cpp' || echo '$(srcdir)/'`net/NetUtil.cpp

libzlreactor_a-NetUtil.obj: net/NetUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-NetUtil.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-NetUtil.Tpo -c -o libzlreactor_a-NetUtil.obj `if test -f 'net/NetUtil.cpp'; then $(CYGPATH_W) 'net/NetUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/net/NetUtil.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-NetUtil.Tpo $(DEPDIR)/libzlreactor_a-NetUtil.Po
#	source='net/NetUtil.cpp' object='libzlreactor_a-NetUtil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-NetUtil.obj `if test -f 'net/NetUtil.cpp'; then $(CYGPATH_W) 'net/NetUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/net/NetUtil.cpp'; fi`

libzlreactor_a-SocketUtil.o: net/SocketUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-SocketUtil.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-SocketUtil.Tpo -c -o libzlreactor_a-SocketUtil.o `test -f 'net/SocketUtil.cpp' || echo '$(srcdir)/'`net/SocketUtil.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-SocketUtil.Tpo $(DEPDIR)/libzlreactor_a-SocketUtil.Po
#	source='net/SocketUtil.cpp' object='libzlreactor_a-SocketUtil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-SocketUtil.o `test -f 'net/SocketUtil.cpp' || echo '$(srcdir)/'`net/SocketUtil.cpp

libzlreactor_a-SocketUtil.obj: net/SocketUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-SocketUtil.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-SocketUtil.Tpo -c -o libzlreactor_a-SocketUtil.obj `if test -f 'net/SocketUtil.cpp'; then $(CYGPATH_W) 'net/SocketUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/net/SocketUtil.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-SocketUtil.Tpo $(DEPDIR)/libzlreactor_a-SocketUtil.Po
#	source='net/SocketUtil.cpp' object='libzlreactor_a-SocketUtil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-SocketUtil.obj `if test -f 'net/SocketUtil.cpp'; then $(CYGPATH_W) 'net/SocketUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/net/SocketUtil.cpp'; fi`

libzlreactor_a-InetAddress.o: net/InetAddress.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-InetAddress.o -MD -MP -MF $(DEPDIR)/libzlreactor_a-InetAddress.Tpo -c -o libzlreactor_a-InetAddress.o `test -f 'net/InetAddress.cpp' || echo '$(srcdir)/'`net/InetAddress.cpp
	$(am__mv) $(DEPDIR)/libzlreactor_a-InetAddress.Tpo $(DEPDIR)/libzlreactor_a-InetAddress.Po
#	source='net/InetAddress.cpp' object='libzlreactor_a-InetAddress.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-InetAddress.o `test -f 'net/InetAddress.cpp' || echo '$(srcdir)/'`net/InetAddress.cpp

libzlreactor_a-InetAddress.obj: net/InetAddress.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libzlreactor_a-InetAddress.obj -MD -MP -MF $(DEPDIR)/libzlreactor_a-InetAddress.Tpo -c -o libzlreactor_a-InetAddress.obj `if test -f 'net/InetAddress.cpp'; then $(CYGPATH_W) 'net/InetAddress.cpp'; else $(CYGPATH_W) '$(srcdir)/net/InetAddress.cpp'; fi`
	$(am__mv) $(DEPDIR)/libzlreactor_a-InetAddress.Tpo $(DEPDIR)/libzlreactor_a-InetAddress.Po
#	source='net/InetAddress.cpp' object='libzlreactor_a-InetAddress.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libzlreactor_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libzlreactor_a-InetAddress.obj `if test -f 'net/InetAddress.cpp'; then $(CYGPATH_W) 'net/InetAddress.cpp'; else $(CYGPATH_W) '$(srcdir)/net/InetAddress.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES)
installdirs:
	for dir in "$(DESTDIR)$(libdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES clean-libtool ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am \
	install-libLIBRARIES install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-libLIBRARIES


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
